Flex/Cup les - Java

Flex standalone

Listing 1  numbers.ex
1
/

∗∗

F i l e s

w i t h

numbers

∗/
6

%%
%public
%c l a s s Numbers
%s t a n d a l o n e

11

%u n i c o d e
%{
/

16

26

no

temp

v a r i a b l e

∗/

%}
/

21

∗

∗

macros

d e f s

∗/

CHIFFRE=[0 − 9]
LETTRE=[A−Za−z ]
NEWLINE=\r | \ n | \ r \n | \ t
%%
{CHIFFRE}+
{NEWLINE}
"+"

{ }
{ }
{ }

<<EOF>>
[^]

{ System . out . p r i n t l n ( " end o f f i l e ! " ) ; return 0 ; }
{ System . out . p r i n t l n ( " c h a r non reconnu ! " ) ; return 1 ; }

Listing 2  standalone.ex

4

%public
%c l a s s Subst
%s t a n d a l o n e
%u n i c o d e
%{

9

%}

S t r i n g name ;

%%
14

"name " [ a−zA−Z]+
[ Hh ] " e l l o "

{ name = y y t e x t ( ) . s u b s t r i n g ( 5 ) ; }
{ System . out . p r i n t ( y y t e x t ()+ " "+name+" ! " ) ; }

Listing 3  counts.ex
1

/

∗∗

F i l e s

w i t h

l i n e s

and

words

∗/

%%
6

%public
%c l a s s Counts
%s t a n d a l o n e
%u n i c o d e

11

%{ / ∗
%}

d e c l a r a t i o n

d e s

v a r i a b l e s

∗/

int num_lines ;
int num_words ;

16

%i n i t { / ∗ C o d e e m b a r q u e
num_lines =0;
num_words=0;
%i n i t }

dans

l e

c o n s t r u c t e u r

!

∗/

21

%e o f { / ∗ C o d e e x e c u t e a l a f i n d e l ' a n a l y s e ( q u a n d EOF e s t a t t e i n t ) ∗ /
System . out . p r i n t l n ( num_lines+" l i g n e s e t "+num_words+" mots ! " ) ;
%e o f }
26

31

/

∗

macros

d e f s

∗/

NEWLINE=\r | \ n | \ r \n
SPACE=\ | \ t
LETTER=[A−Za−z ]
%%
{NEWLINE}
{ num_lines++; }
{SPACE}
{LETTER}+

{}
{num_words++; }

2

Recognizing a language with CUP
Listing 4  anbn.ex
/

5

10

∗

∗/

anbn . f l e x

import java_cup . runtime . ∗ ;
%%
%c l a s s Anbn
%u n i c o d e
%l i n e
%column
%cup

//

i m p o r t

Symbol

c l a s s

e t c

%{
/

∗

To

c r e a t e

token

,

a

t h e

new

java_cup . r u n t i m e . Symbol

t o k e n

w i l l

have

no

v a l u e

i n

w i t h
t h i s

i n f o r m a t i o n
c a s e .

a b o u t

t h e

c u r r e n t

∗/

private Symbol symbol ( int type ) {
return new Symbol ( type , y y l i n e , yycolumn ) ;

}

15

/

∗

A l s o

c r e a t e s

c u r r e n t

token

a

new

java_cup . r u n t i m e . Symbol

,

but

t h i s

o b j e c t

has

a

w i t h

v a l u e .

i n f o r m a t i o n

a b o u t

t h e

∗/

private Symbol symbol ( int type , Object v a l u e ) {
return new Symbol ( type , y y l i n e , yycolumn , v a l u e ) ;

}

20

%}
/

25

∗

∗/

SEPARATEUR = " " | \ n | \ t | \ r
%%
/

30

m o d e l s

∗

r u l e s

∗/

{SEPARATEUR}
"a "
"b"
.

{}
{ return symbol ( sym .TKA) ; }
{ return symbol ( sym .TKB) ; }
{ throw new E r r o r ( " L e x i c a l e r r o r : i l l e g a l c h a r a c t e r <"+y y t e x t ()+ ">

Listing 5  anbn.cup

import java_cup . runtime . ∗ ;

//

i m p o r t

Symbol

c l a s s

e t c

p a r s e r code { :

4

/

∗

/

∗

Taken

from

Change

h t t p : / / www . l i n u x g a z e t t e . n e t / i s s u e 4 1 / l o p e s / l c a l c

t h e

and

column

f o r

t h e

method

r e p o r t _ e r r o r

o f

where

t h e

e r r o r

which

i s

e r r o r
p a s s e d

so

i t

w i l l

d i s p l a y

o c c u r r e d

i n

i n t o

method

t h e

t h e

i n p u t
i n

t h e

t h e
as

. htm

∗/

l i n e
w e l l

S t r i n g

as

t h e

r e a s o n

' m e s s a g e

∗/
9

public void r e p o r t _ e r r o r ( S t r i n g message , Object i n f o ) {
S t r i n g B u f f e r m = new S t r i n g B u f f e r ( " E r r o r " ) ;
i f ( i n f o instanceof java_cup . runtime . Symbol ) {

java_cup . runtime . Symbol s = ( ( java_cup . runtime . Symbol ) i n f o ) ;

3

' .

i f ( s . l e f t >= 0 ) {

m. append ( " i n l i n e "+( s . l e f t + 1 ) ) ;

14

i f ( s . r i g h t >= 0 )

m. append ( " , column "+( s . r i g h t + 1 ) ) ;

19

}

public void r e p o r t _ f a t a l _ e r r o r ( S t r i n g message , Object i n f o ) {

24

}

r e p o r t _ e r r o r ( message , i n f o ) ;
System . e x i t ( 1 ) ;

public void u n r e c o v e r e d _ s y n t a x _ e r r o r ( Symbol cur_token )

29

34

:}

39

}
}
m. append ( " : "+message ) ;
System . e r r . p r i n t l n (m) ;

System . out . p r i n t l n ( cur_token . t o S t r i n g ( ) ) ;
System . out . p r i n t l n ( "At Line "+cur_token . l e f t
+" , column "+cur_token . r i g h t ) ;
System . e x i t ( 1 ) ;
}

{

t e r m i n a l TKA,TKB;
non t e r m i n a l S ;
s t a r t with S ;

44

S : : = TKA S TKB
|
;

Listing 6  anbn.cup

import j a v a . i o . ∗ ;
4

public c l a s s A n a l y s e u r {
s t a t i c public void main ( S t r i n g argv [ ] ) {
try {

9

p a r s e r p = new p a r s e r ( new Anbn ( new F i l e R e a d e r ( argv [ 0 ] ) ) ) ;
Object r e s u l t = p . p a r s e ( ) ;
System . out . p r i n t l n ( " \n f i l e OK" ) ;
} catch ( FileNotFoundException f e ) {
System . out . p r i n t l n ( " \n f i l e not found " ) ;
System . e x i t ( 1 ) ;

4

14

19

}

}

} catch ( E r r o r e ) {
System . out . p r i n t l n ( e . getMessage ( ) ) ;
System . e x i t ( 1 ) ;
}
catch ( E x c e p t i o n e ) {
System . out . p r i n t l n ( e . getMessage ( ) ) ;
System . e x i t ( 1 ) ;
}

5

Expressions with implicit AST
Listing 7  expr.ex
/

3

8

13

∗

e x p r . f l e x

∗/

import java_cup . runtime . ∗ ; / / i m p o r t S y m b o l c l a s s e t c
%%
%c l a s s Expr
%u n i c o d e
%l i n e
%column
%cup
%{ / ∗ a f u n c t i o n t o c r e a t e t o k e n s a l o n g w i t h l i n e , c o l
private Symbol symbol ( int type ) {
return new Symbol ( type , y y l i n e , yycolumn ) ;
}
private Symbol symbol ( int type , Object v a l u e ) {
return new Symbol ( type , y y l i n e , yycolumn , v a l u e ) ;
}

.

numbers

∗/

%}
18

/

∗

∗/

m o d e l s

i n t e g e r =[0 − 9]+
s p a c e=\r | \ n | \ r \n | \ t | \
%%
/

23

∗

r u l e s

∗/

{ integer } {
"+" { return
" ∗ " { return
" ; " { return
{ space }

return symbol ( sym . TKINT, new I n t e g e r ( y y t e x t ( ) ) ) ; }
symbol ( sym .TKPLUS) ; }
symbol ( sym .TKTIMES) ; }
symbol ( sym .TKSEMICOL) ; }
{ }

Listing 8  expr.cup
/

2

∗

e x p r . cup

∗/

import java_cup . runtime . ∗ ;
p a r s e r code { :

public void r e p o r t _ f a t a l _ e r r o r ( S t r i n g message , Object i n f o )
throws E x c e p t i o n { r e p o r t _ e r r o r ( message , i n f o ) ;
throw new E x c e p t i o n ( " Syntax E r r o r " ) ;

7

:};

12

}

t e r m i n a l I n t e g e r TKINT ;
t e r m i n a l TKPLUS, TKTIMES,TKSEMICOL;
non t e r m i n a l S ;
non t e r m i n a l I n t e g e r E ;
p r e c e d e n c e l e f t TKPLUS;

6

17

p r e c e d e n c e l e f t TKTIMES;
S : : = E : e TKSEMICOL { : System . out . p r i n t l n ( e . i n t V a l u e ( ) ) ; : }
;

22

27

E : : = TKINT : n
{ : RESULT = new I n t e g e r ( n . i n t V a l u e ( ) ) ; : }
|
E : e1 TKPLUS E : e2
{ : RESULT = new I n t e g e r ( e1 . i n t V a l u e ( ) + e2 . i n t V a l u e ( ) ) ; : }
|
E : e1 TKTIMES E : e2
{ : RESULT = new I n t e g e r ( e1 . i n t V a l u e ( ) ∗ e2 . i n t V a l u e ( ) ) ; : }
;

7

Expressions with explicit AST
Listing 9  expr.ex(V2)
/

2

7

12

17

∗

e x p r . f l e x

∗/

import java_cup . runtime . ∗ ; / / i m p o r t S y m b o l c l a s s e t c
%%
%c l a s s Expr
%u n i c o d e
%l i n e
%column
%cup
%{ / ∗ a f u n c t i o n t o c r e a t e t o k e n s a l o n g w i t h l i n e , c o l
private Symbol symbol ( int type ) {
return new Symbol ( type , y y l i n e , yycolumn ) ;
}
private Symbol symbol ( int type , Object v a l u e ) {
return new Symbol ( type , y y l i n e , yycolumn , v a l u e ) ;
}

.

numbers

∗/

%}
/

∗

∗/

m o d e l s

i n t e g e r =[0 − 9]+
s p a c e=\r | \ n | \ r \n | \ t | \
%%
22

27

/

∗

r u l e s

∗/

{ integer } {
"+" { return
" ∗ " { return
" ; " { return
{ space }

return symbol ( sym . TKINT, new I n t e g e r ( y y t e x t ( ) ) ) ; }
symbol ( sym .TKPLUS) ; }
symbol ( sym .TKTIMES) ; }
symbol ( sym .TKSEMICOL) ; }
{ }

Listing 10  expr.cup (V2)
/

3

∗

e x p r . cup

∗/

import java_cup . runtime . ∗ ;
p a r s e r code { :

public void r e p o r t _ f a t a l _ e r r o r ( S t r i n g message , Object i n f o )
throws E x c e p t i o n { r e p o r t _ e r r o r ( message , i n f o ) ;
throw new E x c e p t i o n ( " Syntax E r r o r " ) ;

8

:};

13

}

t e r m i n a l I n t e g e r TKINT ;
t e r m i n a l TKPLUS, TKTIMES,TKSEMICOL;
non t e r m i n a l S ;
non t e r m i n a l ASTExpr E ;
/

∗

e s t

p r i o r i t a i r e

s u r

+

!

∗/

8

18

p r e c e d e n c e l e f t TKPLUS;
p r e c e d e n c e l e f t TKTIMES;
S : : = E : e TKSEMICOL { : System . out . p r i n t l n ( e . e v a l ( ) ) ; : }
;

23

28

E : : = TKINT : n
{ : RESULT = new ASTExpr ( n . i n t V a l u e ( ) ) ; : }
|
E : e1 TKPLUS E : e2
{ : RESULT = new ASTExpr ( e1 , ASTExpr .ADD, e2 ) ; : }
|
E : e1 TKTIMES E : e2
{ : RESULT = new ASTExpr ( e1 , ASTExpr .MUL, e2 ) ; : }
;

Listing 11  AST class
1

public c l a s s ASTExpr {
f i n a l s t a t i c int INT=0, ADD=1, MUL=2 ;
int t a g ;
int a s I n t ;
//

v a l u e

ASTExpr e1 , e2 ;

//

u s e d

u s e d

i f

i f

t a g

ADD

=

or

INT

MUL

6
// C o n s t r u c t o r s

ASTExpr ( int i ) { this . t a g = INT ; this . a s I n t = i ; }
ASTExpr ( ASTExpr e1 , int op , ASTExpr e2 ) {
this . t a g = op ; this . e1 = e1 ; this . e2 = e2 ; }

11

// e v a l u a t i o n

o f

an

e x p r e s s i o n

int e v a l ( ) {
switch ( this . t a g ) {
case ASTExpr . INT : return this . a s I n t ;
case ASTExpr .ADD: return this . e1 . e v a l ()+ this . e2 . e v a l ( ) ;
case ASTExpr .MUL: return this . e1 . e v a l ( ) ∗ this . e2 . e v a l ( ) ;
default : throw new E r r o r ( " i n c o r r e c t t a g " ) ;

16

}

21

}
}

Listing 12  Main class

import j a v a . i o . ∗ ;
public c l a s s A n a l y s e u r {
s t a t i c public void main ( S t r i n g argv [ ] ) {
5

try {
9

10

}

}

p a r s e r p = new p a r s e r ( new Expr ( new F i l e R e a d e r ( argv [ 0 ] ) ) ) ;
Object r e s u l t = p . p a r s e ( ) ;
System . out . p r i n t l n ( " \n f i l e OK" ) ;
} catch ( E x c e p t i o n e ) {
System . out . p r i n t l n ( " \n Syntax E r r o r " ) ;
}

10

